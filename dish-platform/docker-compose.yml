version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dish-postgres
    environment:
      POSTGRES_DB: dish_platform
      POSTGRES_USER: dish_user
      POSTGRES_PASSWORD: dish_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dish-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dish-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dish-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dish-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dish_user:dish_password@postgres:5432/dish_platform
      - REDIS_URL=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - dish-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dish-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - dish-network
    restart: unless-stopped

  # Code Execution Sandbox
  sandbox:
    build:
      context: ./sandbox
      dockerfile: Dockerfile
    container_name: dish-sandbox
    environment:
      - NODE_ENV=production
    ports:
      - "3002:3002"
    volumes:
      - sandbox_data:/app/data
    networks:
      - dish-network
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dish-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - dish-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dish-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dish-network
    restart: unless-stopped

  # Logging with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dish-grafana
    ports:
      - "3003:3003"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - dish-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  sandbox_data:
  prometheus_data:
  grafana_data:

networks:
  dish-network:
    driver: bridge